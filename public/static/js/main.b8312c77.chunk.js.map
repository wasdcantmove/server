{"version":3,"sources":["App.js","reportWebVitals.js","index.js","background.png"],"names":["publicKey","allNftData","loc","window","location","href","indexOf","replace","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getAnalytics","App","useState","isLoaded","setIsLoaded","progression","setProgression","provider","setProvider","getProvider","a","solana","connect","isPhantom","alert","data","getAllNftData","getNftTokenData","createConnection","Connection","method","headers","mode","createConnectionConfig","ownerToken","isValidSolanaAddress","getParsedNftAccountsByOwner","publicAddress","connection","serialization","nfts","console","log","root","arr","nftData","Object","keys","map","key","n","length","i","axios","get","uri","statusCode","val","push","newJson","JSON","parse","stringify","value","toString","send","useEffect","on","isConnected","then","letsgo","catch","error","disconnect","parseFloat","toFixed","style","visibility","backgroundImage","background","backgroundSize","height","width","color","position","left","top","textAlign","bottom","fontSize","fontColor","overflow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b8312c77.chunk.js","sourcesContent":["import React, {useState, useEffect } from \"react\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport background from \"./background.png\";\nimport axios from \"axios\";\nimport { Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner, isValidSolanaAddress, createConnectionConfig} from \"@nfteyez/sol-rayz\";\nimport './App.css';\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n\nvar publicKey;\nvar allNftData;\n\nvar loc = window.location.href+'';\nif (loc.indexOf('http://')==0){\n  window.location.href = loc.replace('http://','https://');\n}\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"./Build/public.loader.js\",\n  dataUrl: \"./Build/public.data\",\n  frameworkUrl: \"./Build/public.framework.js\",\n  codeUrl: \"./Build/public.wasm\"\n});\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDcvry5_ArzMtQPFKAqawHgnAZuBusa_Ws\",\n  authDomain: \"moonland-8788b.firebaseapp.com\",\n  projectId: \"moonland-8788b\",\n  storageBucket: \"moonland-8788b.appspot.com\",\n  messagingSenderId: \"533308612802\",\n  appId: \"1:533308612802:web:2f02128e0d471808d3db5b\",\n  measurementId: \"G-GQHPLJ7Y5M\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [progression, setProgression] = useState(0);\n  const [provider, setProvider] = useState(\"\");\n\n\n  const getProvider = async () => {\n    if (\"solana\" in window) {\n      await window.solana.connect();\n      const provider = window.solana;\n      if (provider.isPhantom) {\n        return provider;\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n  };\n\n  async function letsgo() {\n     createConnection();\n     getProvider();\n       async function data() {\n         let res = await getAllNftData();\n         getNftTokenData();\n       }\n       data();\n  }\n\n  //create a connection\nconst createConnection = () => {\n  // return new Connection(clusterApiUrl(\"devnet\"));\n  return new Connection(\"https://solana-api.projectserum.com/\", {\n    method:\"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\":\"*\",\n      \"Access-Control-Request-Headers\":\"*\",\n      \"Access-Control-Allow-Methods\": \"GET\",\n      \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n    },\n    mode: 'no-cors'\n    })\n  // Connection(\"https://www.whateverorigin.org/get?url=\" + clusterApiUrl(\"mainnet-beta\"))\n};\n\n  //get NFT\n  const getAllNftData = async () => {\n    try {\n      const connect =  createConnectionConfig(\"https://solana-api.projectserum.com/\", {\n        method:\"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\":\"*\",\n          \"Access-Control-Request-Headers\":\"*\",\n          \"Access-Control-Allow-Methods\": \"GET\",\n          \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n        },\n        mode: 'no-cors'\n        })\n      // const connect =  createConnectionConfig(clusterApiUrl(\"devnet\"));\n      const provider = getProvider();\n      let ownerToken = publicKey;\n      const result = isValidSolanaAddress(ownerToken);\n      const nfts = await getParsedNftAccountsByOwner({\n        publicAddress: ownerToken,\n        connection: connect,\n        serialization: true,\n      });\n      return nfts;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n    var root = {\n      data:{\n        arr:[]\n      } \n    };\n    let nftData = await getAllNftData();\n    var data = Object.keys(nftData).map((key) => nftData[key]);                                                                    \n    let n = data.length;\n    for (let i = 0; i < n; i++) {\n      let val = await axios.get(data[i].data.uri, {\n          statusCode: 200,\n          method:\"GET\",\n          headers: {        \n            \"Content-Type\": \"application/json\",\n            \"Access-Control-Allow-Origin\":\"*\",\n            \"Access-Control-Request-Headers\":\"*\",\n            \"Access-Control-Allow-Methods\": \"GET\",\n            \"Access-Control-Allow-Headers\": \"Origin, Content-Type\"\n          },\n          mode: 'no-cors'\n      }\n      );\n      root.data.arr.push(val);\n      let newJson = JSON.parse(JSON.stringify(root.data), (key, value) => {\n        if (typeof value === 'number') {\n          return value.toString();\n        }\n        if (typeof value === 'boolean') {\n          return value.toString();\n        }\n        return value;\n      });\n      allNftData = newJson;\n      // console.log(allNftData);\n      console.log(i);\n      unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n    }\n    console.log(\"Finished Loading NFTs\");\n    // console.log(JSON.stringify(allNftData));\n    // unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n    return root.data.arr;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst NFT = async (props) => {\n  const [nftData, setNftData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  createConnection();\n  getProvider();\nuseEffect(() => {\n    async function data() {\n      let res = await getAllNftData();\n      setNftData(res);\n      setLoading(true);\n      getNftTokenData();\n    }\n    data();\n  }, []);\n}\n  \n  useEffect( () => {\n   setProvider(publicKey);\n  }, []);\n  useEffect( () => {\n    setProvider(publicKey);\n   }, []);\n\n   useEffect(function () {    \n    unityContext.on(\"NFT\", function () {\n      if (\"solana\" in window) {\n      if (window.solana.isConnected) {\n        // console.log(JSON.stringify(allNftData));\n        unityContext.send(\"SolanaWalletConnect\", \"SetWalletAddress\", provider.publicKey.toString());\n        unityContext.send(\"SolanaWalletConnect\", \"SetNFTData\", JSON.stringify(allNftData));\n      } else {\n        getProvider().then(provider => {\n          // console.log('key', provider.publicKey.toString());\n          publicKey = provider.publicKey.toString();\n          unityContext.send(\"SolanaWalletConnect\", \"SetWalletAddress\", provider.publicKey.toString());\n          setProvider(provider.publicKey.toString());\n        }).then(() => {\n          letsgo();\n        }).catch(function(error){\n          console.log(error)\n          console.log(\"fail to make connection5\");\n        });\n      }\n    } else {\n      window.alert('Install https://www.phantom.app/');\n    }\n    });\n  }, []);\n\n  useEffect(function () {    \n    unityContext.on(\"Logout\", function () {\n      if (window.solana.isConnected) {\n        window.solana.disconnect();\n        window.solana.on('disconnect', () => console.log(\"disconnected!\"))\n        unityContext.send(\"SolanaWalletConnect\", \"Disconnected\");\n      }\n    });\n  }, []);\n\n  useEffect(function () {\n    unityContext.on(\"progress\", function (progression) {\n      console.log(\"progress\");\n      setProgression(parseFloat(progression * 100).toFixed(2));\n    });\n  }, []);\n\n\n  useEffect(function () {\n    unityContext.on(\"loaded\", function () {\n      console.log(\"loaded\");\n      setIsLoaded(true);\n    });\n  }, []);\n\nvar some = \"0\";\n  return (\n\n  <div style = {{\n    visibility: isLoaded ? \"hidden\" : \"visible\",\n    backgroundImage: `url(${background})`,\n      backgroundSize: \"cover\",\n      height: \"100%\",\n      width: \"100%\",\n      color: \"#f5f5f5\",\n    position: 'absolute',\n    left: 0,\n    top: 0,\n  }}>\n\n   <p\n    style={{ visibility: isLoaded ? \"hidden\" : \"visible\",\n    height: \"30px\",\n    width: \"100%\",\n    position: \"absolute\",\n    textAlign: 'center',\n    bottom: \"100px\",\n    fontSize: \"2em\",\n    fontColor: \"red\",\n\n    \n \n    }}>Loading... {progression}%</p>\n\n    \n   \n   <div>\n   <Unity\n      style={{ visibility: isLoaded ? \"visible\" : \"hidden\",\n        height: \"100%\",\n        width: \"100%\",\n        background: \"grey\",\n        position: 'absolute',\n        left: 0,\n        top: 0,\n        overflow: \"hidden\",\n     \n    }}\n      unityContext={unityContext}\n    />\n    </div>\n    </div>\n  );\n\n  }\n\n  \n  \nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/background.f45e90e0.png\";"],"sourceRoot":""}